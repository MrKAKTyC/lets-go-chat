// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/MrKAKTyC/lets-go-chat/pkg/generated/auth"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: user
func (_m *UserService) Authorize(user auth.LoginUserRequest) (*auth.LoginUserResponse, error) {
	ret := _m.Called(user)

	var r0 *auth.LoginUserResponse
	if rf, ok := ret.Get(0).(func(auth.LoginUserRequest) *auth.LoginUserResponse); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.LoginUserRequest) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *UserService) Register(user auth.CreateUserRequest) (*auth.CreateUserResponse, error) {
	ret := _m.Called(user)

	var r0 *auth.CreateUserResponse
	if rf, ok := ret.Get(0).(func(auth.CreateUserRequest) *auth.CreateUserResponse); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.CreateUserRequest) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
